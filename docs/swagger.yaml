basePath: /
definitions:
  models.Element:
    properties:
      height:
        type: integer
      id:
        type: string
      imageUrl:
        type: string
      static:
        type: boolean
      width:
        type: integer
    type: object
  schemas.AvatarResponse:
    properties:
      id:
        type: string
      imageUrl:
        type: string
      name:
        type: string
    type: object
  schemas.CreateAvatarRequest:
    properties:
      imageUrl:
        type: string
      name:
        type: string
    required:
    - imageUrl
    - name
    type: object
  schemas.CreateAvatarResponse:
    properties:
      avatarId:
        type: string
    type: object
  schemas.CreateElementRequest:
    properties:
      height:
        type: integer
      imageURL:
        type: string
      static:
        type: boolean
      width:
        type: integer
    required:
    - height
    - imageURL
    - static
    - width
    type: object
  schemas.CreateElementResponse:
    properties:
      id:
        type: string
    type: object
  schemas.CreateSpaceRequest:
    properties:
      mapId:
        type: string
      name:
        type: string
    required:
    - mapId
    - name
    type: object
  schemas.CreateSpaceResponse:
    properties:
      spaceId:
        type: string
    type: object
  schemas.GetAllElementsResponse:
    properties:
      elements:
        items:
          $ref: '#/definitions/models.Element'
        type: array
    type: object
  schemas.GetAllSpacesResponse:
    properties:
      spaces:
        items:
          $ref: '#/definitions/schemas.SpaceResponse'
        type: array
    type: object
  schemas.GetAvatarsResponse:
    properties:
      avatars:
        items:
          $ref: '#/definitions/schemas.AvatarResponse'
        type: array
    type: object
  schemas.GetUserMetadataBulkResponse:
    properties:
      avatars:
        items:
          $ref: '#/definitions/schemas.UserMetadataResponse'
        type: array
    type: object
  schemas.SignInRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  schemas.SignInResponse:
    properties:
      token:
        type: string
    type: object
  schemas.SignUpRequest:
    properties:
      password:
        maxLength: 100
        minLength: 8
        type: string
      type:
        enum:
        - Admin
        - User
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - password
    - type
    - username
    type: object
  schemas.SignUpResponse:
    properties:
      userId:
        type: string
    type: object
  schemas.SpaceResponse:
    properties:
      Thumbnail:
        type: string
      creatorID:
        type: string
      dimensions:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  schemas.UpdateElementRequest:
    properties:
      imageUrl:
        type: string
    required:
    - imageUrl
    type: object
  schemas.UpdateMetadataRequest:
    properties:
      avatarId:
        type: string
    required:
    - avatarId
    type: object
  schemas.UpdateMetadataResponse:
    properties:
      success:
        type: boolean
    type: object
  schemas.UserMetadataResponse:
    properties:
      imageUrl:
        type: string
      userId:
        type: string
    type: object
  utils.ErrorStruct:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A RESTful API service for SPAC
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SPAC REST API
  version: "1.0"
paths:
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Sign in credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SignInResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
      summary: Login user
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user with username, password and type
      parameters:
      - description: Sign up request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "409":
          description: Username already exists
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "503":
          description: Database connection error
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
      summary: Register a new user
      tags:
      - auth
  /avatar:
    post:
      consumes:
      - application/json
      description: Create an avatar with specified image URL and name
      parameters:
      - description: Avatar creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateAvatarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CreateAvatarResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Create a new avatar
      tags:
      - avatars
  /avatars:
    get:
      description: Get list of all available avatars
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.GetAvatarsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get available avatars
      tags:
      - avatars
  /element:
    post:
      consumes:
      - application/json
      description: Create an element with specified properties
      parameters:
      - description: Element creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateElementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CreateElementResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Create a new element
      tags:
      - elements
  /element/{elementId}:
    put:
      consumes:
      - application/json
      description: Update an element's image URL
      parameters:
      - description: Element ID
        in: path
        name: elementId
        required: true
        type: string
      - description: Element update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateElementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "404":
          description: Element not found
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Update an element
      tags:
      - elements
  /elements:
    get:
      description: Get a list of all available elements
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.GetAllElementsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
      summary: Get all elements
      tags:
      - elements
  /space:
    post:
      consumes:
      - application/json
      description: Create a space with specified name, dimensions and map ID
      parameters:
      - description: Space creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateSpaceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CreateSpaceResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Create a new space
      tags:
      - spaces
  /space/{spaceId}:
    delete:
      description: Delete a space by its ID
      parameters:
      - description: Space ID
        example: 123e4567-e89b-12d3-a456-426614174000
        in: path
        name: spaceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted
        "400":
          description: Invalid space ID
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "404":
          description: Space not found
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Delete a space
      tags:
      - spaces
  /space/all:
    get:
      description: Get all spaces for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.GetAllSpacesResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get all spaces
      tags:
      - spaces
  /users/metadata:
    post:
      consumes:
      - application/json
      description: Update user's avatar and other metadata
      parameters:
      - description: Update metadata request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateMetadataRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UpdateMetadataResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Update user metadata
      tags:
      - users
  /users/metadata/bulk:
    get:
      description: Get metadata for multiple users
      parameters:
      - description: 'User IDs array format: [uuid1,uuid2,uuid3]'
        in: query
        name: ids
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.GetUserMetadataBulkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get users metadata bulk
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
